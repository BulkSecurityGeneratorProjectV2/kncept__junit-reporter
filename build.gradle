buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" } 
    }
    dependencies {
    	//previously released version of junit-reporter
    	classpath 'com.kncept.junit5.reporter:junit-reporter:1.0.2'
    
    	//Junit 5 plugin
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
        
        // https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md
		classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}

plugins {
	// https://docs.gradle.org/current/userguide/javaGradle_plugin.html
    id 'java-gradle-plugin'
}

apply plugin: 'eclipse'
apply plugin: 'idea'
 
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'com.kncept.junit5.reporter'
apply plugin: 'com.moowork.node'

apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'com.kncept.junit5.reporter'
version = '1.0.3'

//add generated source sets
sourceSets {
	// javascript
	main {
	    resources {
	        srcDir 'generatedsrc/main/resources'
	    }
	}
	//JUnit5
	test {
	    resources {
	        srcDir 'generatedsrc/test/resources'
	    }
	}
	pretest {
		java {
			srcDir 'src/pretest/java'
		}
	}
}
task initGeneratedDirectories {
	doFirst {
		File resourcesDir = new File('generatedsrc/main/resources')
		resourcesDir.mkdirs();
		
		resourcesDir = new File('generatedsrc/test/resources')
		resourcesDir.mkdirs();
	}
}
task cleanGeneratedDirectories {
	doLast {
		recursivelyDeleteFile(new File(project.projectDir, 'generatedsrc'))
	}
}
def recursivelyDeleteFile(file) {
	if (file.directory) {
		file.eachFile {
			recursivelyDeleteFile(it)
		}
	}
	file.delete()
}

junitPlatform {
	filters {
		tags {
			exclude 'test-data'
		}
	}
}

task compilePretest (type: JavaCompile) {
	source = sourceSets.pretest.java.srcDirs
	classpath = project.files(project.sourceSets.test.compileClasspath, project.sourceSets.pretest.compileClasspath)
	destinationDir = sourceSets.pretest.output.classesDir
}

// based on
// https://github.com/junit-team/junit5/issues/700#issuecomment-283374073
// http://junit.org/junit5/docs/current/user-guide/#running-tests-console-launcher
task generateTestData(type: JavaExec) {
    classpath = project.sourceSets.pretest.runtimeClasspath
    //classpath = project.files(project.sourceSets.test.runtimeClasspath, project.sourceSets.pretest.runtimeClasspath)
    main 'org.junit.platform.console.ConsoleLauncher'
    args '--scan-class-path'
    args '--reports-dir=' + new File(project.projectDir, 'generatedsrc/test/resources/').absolutePath
    //args '--include-tag=test-data'
    ignoreExitValue true
}
generateTestData.dependsOn compilePretest
generateTestData.dependsOn initGeneratedDirectories
testClasses.dependsOn generateTestData
//junitPlatformTest.dependsOn generateTestData

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task testSourcesJar(type: Jar) {
    classifier = 'testsources'
    from sourceSets.test.allSource
}

jar.manifest {
	attributes(
		'Implementation-Title': project.name,
		'Implementation-Vendor' : 'kncept',
		'Implementation-Version': project.version,
		'Implementation-Author': 'Nicholas Krul', //non standard
		'Created-By': System.getProperty('java.version'),
		'Built-By': System.getProperty('user.name'),
		//'Built-Host': getHostname(),
		'Built-Date': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
		'Source-Compatibility': project.sourceCompatibility,
		'Target-Compatibility': project.targetCompatibility
	)
}

artifacts {
    archives javadocJar, sourcesJar, testSourcesJar
}

//Allow building but disable signing if the gpg config isn't available
signing {
    sign configurations.archives
}
signArchives.onlyIf {new File('gradle.properties').exists()}

task wrapper(type: Wrapper) {
	description = 'gradlew'
	gradleVersion = '4.3.1'
}

repositories {
	mavenLocal()
	mavenCentral()
}

//hoist properties if gradle.properties exists
String username = null
String password = null
if (project.hasProperty('ossrhUsername')) {
	username = ossrhUsername
}
if (project.hasProperty('ossrhPassword')) {
	password = ossrhPassword
}
uploadArchives.dependsOn check

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: username, password: password)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: username, password: password)
      }

      pom.project {
        name 'Junit Reporter'
        packaging 'jar'
        // optionally artifactId can be defined here 
        description 'Produces HTML reports from the Junit xml report'
        url 'https://github.com/kncept/junit-reporter'

        scm {
          connection 'scm:https://github.com/kncept/junit-reporter.git'
          developerConnection 'scm:https://github.com/kncept/junit-reporter.git'
          url 'https://github.com/kncept/junit-reporter'
        }

        licenses {
          license {
            name 'Eclipse Public License - v 1.0'
            url 'https://github.com/kncept/junit-reporter/blob/master/LICENSE'
          }
        }

        developers {
          developer {
            id 'nkrul'
            name 'Nicholas Krul'
            email 'nicholas.krul@gmail.com'
          }
        }
      }
    }
  }
}

//http://stackoverflow.com/questions/11209382/build-maven-plugins-using-gradle
task pluginDescriptor( type: Exec ) {
    commandLine 'mvn', '-e', '-B', 'org.apache.maven.plugins:maven-plugin-plugin:3.2:descriptor'
    doFirst {
        final File pom = project.file( 'pom.xml' )
        install.repositories.mavenInstaller.pom.writeTo( pom )
        assert pom.file, "[$pom.canonicalPath] was not created"

        pom.text = pom.text.
            replace( '<groupId>unknown</groupId>',             "<groupId>${project.group}</groupId>" ).
            replace( '<artifactId>empty-project</artifactId>', "<artifactId>${project.name}</artifactId>" ).
            replace( '<version>0</version>',                   """
                                                              |<version>${version}</version>
                                                              |  <packaging>maven-plugin</packaging>
                                                              |  <build>
                                                              |    <directory>\${project.basedir}/build</directory>
                                                              |    <outputDirectory>\${project.build.directory}/classes/main</outputDirectory>
                                                              |  </build>
                                                              |""".stripMargin().trim())
    }
    doLast {
        final  pluginDescriptor = new File(( File ) project.compileGroovy.destinationDir, 'META-INF/maven/plugin.xml' )
        assert pluginDescriptor.file, "[$pluginDescriptor.canonicalPath] was not created"
        println "Plugin descriptor file:$pluginDescriptor.canonicalPath is created successfully"
    }
}
//project.compileGroovy.doLast{ pluginDescriptor.execute() }

dependencies {
    //Maven plugin dependencies
    compile 'org.apache.maven:maven-plugin-api:3.3.9'
    compile 'org.apache.maven.plugin-tools:maven-plugin-annotations:3.5'
    
    //JUnit5 dependencies
	testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.2'
	testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.2'
	
	pretestCompile 'org.junit.jupiter:junit-jupiter-api:5.0.2'
	pretestRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.2'
	pretestRuntime 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
}

node {
	//download a version to use.
	//otherwise this will use npm from the system PATH
	download = true
}

task npmBuild(type: NpmTask) {
  args = ['run', 'build']
}
npmBuild.dependsOn initGeneratedDirectories
npmBuild.dependsOn npmInstall
compileJava.dependsOn npmBuild
//clean.dependsOn npm_cache_clean
clean.dependsOn cleanGeneratedDirectories