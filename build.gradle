buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" } 
    }
    dependencies {
    	//previously released version of junit-reporter
    	classpath 'com.kncept.junit5.reporter:junit-reporter:1.1.0'
        
        // https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md
		classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}

plugins {
	// https://docs.gradle.org/current/userguide/javaGradle_plugin.html
    id 'java-gradle-plugin'
}

apply plugin: 'eclipse'
apply plugin: 'idea'

apply plugin: 'com.kncept.junit5.reporter'
apply plugin: 'com.moowork.node'

apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'com.kncept.junit5.reporter'
version = '1.2.0'

def jUnit5Version = "5.2.0"

//add generated source sets
sourceSets {
	// javascript
	main {
	    resources.srcDirs += 'generatedsrc/main/resources'
	}
	//JUnit5
	test {
	    resources.srcDirs += 'generatedsrc/test/resources'
	}
	pretest {
		java.srcDirs += 'src/pretest/java'
	}
}
task initGeneratedDirectories {
	doFirst {
		File resourcesDir = new File('generatedsrc/main/resources')
		resourcesDir.mkdirs();
		
		resourcesDir = new File('generatedsrc/test/resources')
		resourcesDir.mkdirs();
	}
}
task cleanGeneratedDirectories {
	doLast {
		recursivelyDeleteFile(new File(project.projectDir, 'generatedsrc'))
	}
}
def recursivelyDeleteFile(file) {
	if (file.directory) {
		file.eachFile {
			recursivelyDeleteFile(it)
		}
	}
	file.delete()
}

test {
	useJUnitPlatform {
		excludeTags 'test-data'
	}
}

task compilePretest (type: JavaCompile) {
	source = sourceSets.pretest.java.srcDirs
	classpath = project.sourceSets.pretest.compileClasspath
	destinationDir = sourceSets.pretest.output.classesDir
}
compilePretest.dependsOn compileJava

// based on
// https://github.com/junit-team/junit5/issues/700#issuecomment-283374073
// http://junit.org/junit5/docs/current/user-guide/#running-tests-console-launcher
task generateTestData(type: JavaExec) {
    classpath = project.sourceSets.pretest.runtimeClasspath
    main 'org.junit.platform.console.ConsoleLauncher'
    args '--scan-class-path'
    args '--reports-dir=' + new File(project.projectDir, 'generatedsrc/test/resources/').absolutePath
    ignoreExitValue true
}
generateTestData.dependsOn compilePretest
generateTestData.dependsOn initGeneratedDirectories
test.dependsOn generateTestData

task reportOnTestData(type: JavaExec) {
    classpath = project.sourceSets.main.runtimeClasspath
    main 'com.kncept.junit5.reporter.html.TestReportProcessor'
    args 'testResultsDir=' + new File(project.projectDir, 'generatedsrc/test/resources/').absolutePath
    args 'testReportsDir=' + new File(project.projectDir, 'generatedsrc/test/resources/').absolutePath
    args 'aggregatedReporting=true'
}
reportOnTestData.dependsOn generateTestData 
testClasses.dependsOn reportOnTestData

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

javadoc {
	//html5 isn't there yet in 1.8
	if (!System.getProperty("java.version").startsWith("1.8.")) {
		options.addBooleanOption('html5', true)
	}
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task testSourcesJar(type: Jar) {
    classifier = 'testsources'
    from sourceSets.test.allSource
}

jar {
	manifest {
		attributes(
			'Implementation-Title': project.name,
			'Implementation-Vendor' : 'kncept',
			'Implementation-Version': project.version,
			'Implementation-Author': 'Nicholas Krul', //non standard
			'Created-By': System.getProperty('java.version'),
			'Built-By': System.getProperty('user.name'),
			'Built-Date': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			'Source-Compatibility': project.sourceCompatibility,
			'Target-Compatibility': project.targetCompatibility,
			'Main-Class': 'com.kncept.junit5.reporter.html.TestReportProcessor'
		)
	}
}


artifacts {
    archives javadocJar, sourcesJar, testSourcesJar
}

//Allow building but disable signing if the gpg config isn't available
signing {
    sign configurations.archives
}
signArchives.onlyIf {new File('gradle.properties').exists()}

task wrapper(type: Wrapper) {
	description = 'gradlew'
	gradleVersion = '4.8'
}

repositories {
	mavenLocal()
	mavenCentral()
}

//hoist properties if gradle.properties exists
String username = null
String password = null
if (project.hasProperty('ossrhUsername')) {
	username = ossrhUsername
}
if (project.hasProperty('ossrhPassword')) {
	password = ossrhPassword
}
uploadArchives.dependsOn check

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: username, password: password)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: username, password: password)
      }

      pom.project {
        name 'Junit Reporter'
        packaging 'jar'
        // optionally artifactId can be defined here 
        description 'Produces HTML reports from the Junit xml report'
        url 'https://github.com/kncept/junit-reporter'

        scm {
          connection 'scm:https://github.com/kncept/junit-reporter.git'
          developerConnection 'scm:https://github.com/kncept/junit-reporter.git'
          url 'https://github.com/kncept/junit-reporter'
        }

        licenses {
          license {
            name 'Eclipse Public License - v 1.0'
            url 'https://github.com/kncept/junit-reporter/blob/master/LICENSE'
          }
        }

        developers {
          developer {
            id 'nkrul'
            name 'Nicholas Krul'
            email 'nicholas.krul@gmail.com'
          }
        }
      }
    }
  }
}

dependencies {
    //JUnit5 dependencies
	testCompile "org.junit.jupiter:junit-jupiter-api:${jUnit5Version}"
	testRuntime "org.junit.jupiter:junit-jupiter-engine:${jUnit5Version}"
	
	pretestCompile "org.junit.jupiter:junit-jupiter-api:${jUnit5Version}"
	pretestRuntime "org.junit.jupiter:junit-jupiter-engine:${jUnit5Version}"
	pretestRuntime "org.junit.platform:junit-platform-console:1.2.0"
}

node {
	// Version of node to use.
	version = '6.9.1'

	// Version of npm to use.
	npmVersion = '5.10.0'
  
	//download a version to use.
	//otherwise this will use npm from the system PATH
	download = true
}

task npmBuild(type: NpmTask) {
  args = ['run', 'build']
}
npmBuild.dependsOn initGeneratedDirectories
npmBuild.dependsOn npmInstall
processResources.dependsOn npmBuild
//compileJava.dependsOn processResources

//clean.dependsOn npm_cache_clean
clean.dependsOn cleanGeneratedDirectories