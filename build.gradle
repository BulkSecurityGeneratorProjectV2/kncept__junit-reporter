//
// Useful gradle targets:
//  gradlew install  -->>  install to local maven repo
//  gradlew uploadArchives  -->>  upload to oss.sonatype.org
//  gradlew publishPlugins  -->>  upload to plugins.gradle.org
//  gradlew check  -->>  Performs standard testing
//  gradlew wrapper -->> re run the gradle wrapper script 

plugins {
	// https://plugins.gradle.org/docs/publish-plugin
	id "com.gradle.plugin-publish" version "0.10.1"

	// https://docs.gradle.org/current/userguide/javaGradle_plugin.html
    id 'java-gradle-plugin'
    
    // previous version of the plugin from the gradle community plugins - self documentation!
	id "com.kncept.junit.reporter" version "2.0.1"
	
	// plugin for embedded node and npm tasks
	// https://github.com/srs/gradle-node-plugin
	id "com.moowork.node" version "1.3.1"
}

apply plugin: 'eclipse'
apply plugin: 'idea'

apply plugin: 'com.kncept.junit.reporter'
apply plugin: 'com.moowork.node'

apply plugin: 'maven'
apply plugin: 'signing'

defaultTasks 'clean', 'check'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'com.kncept.junit.reporter'
version = '2.1.0'

def jUnit5Version = "5.5.2"
def jUnit5PlatformVersion = "1.5.2"

gradlePlugin {
  plugins {
    reporterPlugin {
      id = 'com.kncept.junit.reporter'
      implementationClass = 'com.kncept.junit.reporter.gradle.TestHTMLReporterPlugin'
    }
  }
}
pluginBundle {
  website = 'https://github.com/kncept/junit-reporter'
  vcsUrl = 'https://github.com/kncept/junit-reporter.git'
  description = 'Produces HTML reports from the Junit xml output'
  tags = ['junit', 'report']
  plugins {
    reporterPlugin {
      displayName = 'Junit Reporter'
    }
  }
}

//add embedded maven build
configurations {
    mavenEmbedder
}

//add generated source sets
sourceSets {
	// javascript output directory
	main {
	    resources.srcDirs += 'generatedsrc/main/resources'
	}
	//JUnit5
	test {
	    resources.srcDirs += 'generatedsrc/test/resources'
	}
	pretest {
		java.srcDirs += 'src/pretest/java'
		java.outputDir = file("$buildDir/pretest")
	}
}
task initGeneratedDirectories {
	doFirst {
		new File('generatedsrc/main/resources').mkdirs()
		new File('generatedsrc/test/resources').mkdirs()
	}
}
task cleanGeneratedDirectories {
	doLast {
		recursivelyDeleteFile(new File(project.projectDir, 'generatedsrc'))
	}
}
def recursivelyDeleteFile(file) {
	if (file.directory) {
		file.eachFile {
			recursivelyDeleteFile(it)
		}
	}
	file.delete()
}

test {
	useJUnitPlatform {
		excludeTags 'test-data'
	}
}

task compilePretest (type: JavaCompile) {
	source = sourceSets.pretest.java.srcDirs
	classpath = project.sourceSets.pretest.compileClasspath
	destinationDir = project.sourceSets.pretest.java.outputDir
}
compilePretest.dependsOn compileJava

// based on
// https://github.com/junit-team/junit5/issues/700#issuecomment-283374073
// http://junit.org/junit5/docs/current/user-guide/#running-tests-console-launcher
task generateTestData(type: JavaExec) {
    classpath = project.sourceSets.pretest.runtimeClasspath
    main 'org.junit.platform.console.ConsoleLauncher'
    args '--scan-class-path'
    args '--reports-dir=' + new File(project.projectDir, 'generatedsrc/test/resources/').absolutePath
    ignoreExitValue true
    outputs.dir "$project.projectDir/generatedsrc/test/resources"
}

generateTestData.dependsOn compilePretest
generateTestData.dependsOn initGeneratedDirectories
processTestResources.dependsOn generateTestData
test.dependsOn generateTestData

task reportOnTestData(type: JavaExec) {
    inputs.dir "$project.projectDir/generatedsrc/test/resources"
    outputs.dir "$project.projectDir/generatedsrc/test/resources"
    classpath = project.sourceSets.main.runtimeClasspath
    main 'com.kncept.junit.reporter.TestReportProcessor'
    args 'testResultsDir=' + new File(project.projectDir, 'generatedsrc/test/resources/').absolutePath
    args 'testReportsDir=' + new File(project.projectDir, 'generatedsrc/test/resources/').absolutePath
}
reportOnTestData.dependsOn generateTestData 
testClasses.dependsOn reportOnTestData

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

javadoc {
	//html5 isn't there yet in 1.8
	if (!System.getProperty("java.version").startsWith("1.8.")) {
		options.addBooleanOption('html5', true)
	}
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task testSourcesJar(type: Jar) {
    classifier = 'testsources'
    from sourceSets.test.allSource
}

jar {
	manifest {
		attributes(
			'Implementation-Title': project.name,
			'Implementation-Vendor' : 'kncept',
			'Implementation-Version': project.version,
			'Implementation-Author': 'Nicholas Krul', //non standard
			'Created-By': System.getProperty('java.version'),
			'Built-By': System.getProperty('user.name'),
			'Built-Date': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			'Source-Compatibility': project.sourceCompatibility,
			'Target-Compatibility': project.targetCompatibility,
			'Main-Class': 'com.kncept.junit.reporter.TestReportProcessor'
		)
	}
}

artifacts {
    archives javadocJar, sourcesJar, testSourcesJar
}

//Allow building but disable signing if the gpg config isn't available
signing {
    sign configurations.archives
}
signArchives.onlyIf {new File('gradle.properties').exists()}

wrapper {
	gradleVersion = '5.6.3'
}

repositories {
	mavenLocal()
	mavenCentral()
}

//hoist properties if gradle.properties exists
String username = null
String password = null
if (project.hasProperty('ossrhUsername')) {
	username = ossrhUsername
}
if (project.hasProperty('ossrhPassword')) {
	password = ossrhPassword
}
uploadArchives.dependsOn check

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: username, password: password)
      }
      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: username, password: password)
      }

      pom.project {
        name 'Junit Reporter'
        packaging 'jar'
        // optionally artifactId can be defined here 
        description 'Produces HTML reports from the Junit xml output'
        url 'https://github.com/kncept/junit-reporter'

        scm {
          connection 'scm:https://github.com/kncept/junit-reporter.git'
          developerConnection 'scm:https://github.com/kncept/junit-reporter.git'
          url 'https://github.com/kncept/junit-reporter'
        }

        licenses {
          license {
            name 'Eclipse Public License - v 1.0'
            url 'https://github.com/kncept/junit-reporter/blob/master/LICENSE'
          }
        }

        developers {
          developer {
            id 'nkrul'
            name 'Nicholas Krul'
            email 'nicholas.krul@gmail.com'
          }
        }
      }
    }
  }
}

dependencies {
    //JUnit5 dependencies
	testCompile "org.junit.jupiter:junit-jupiter-api:${jUnit5Version}"
	testRuntime "org.junit.jupiter:junit-jupiter-engine:${jUnit5Version}"
	
	implementation "org.apache.maven:maven-plugin-api:3.5.4"
	implementation "org.apache.maven.plugin-tools:maven-plugin-annotations:3.5.2"
	
	pretestCompile "org.junit.jupiter:junit-jupiter-api:${jUnit5Version}"
	pretestRuntime "org.junit.jupiter:junit-jupiter-engine:${jUnit5Version}"
	pretestRuntime "org.junit.platform:junit-platform-console:${jUnit5PlatformVersion}"
	
	//inherited from gradle
	//implementation 'org.slf4j:slf4j-api:1.7.26'
	
	//Maven3 plugin builder
	mavenEmbedder "org.apache.maven:maven-embedder:3.5.4"
    mavenEmbedder 'org.slf4j:slf4j-simple:1.7.5'
    mavenEmbedder "org.apache.maven:maven-compat:3.5.4"
    mavenEmbedder 'org.eclipse.aether:aether-connector-basic:1.1.0'
    mavenEmbedder 'org.eclipse.aether:aether-transport-wagon:1.1.0'
    mavenEmbedder 'org.apache.maven.wagon:wagon-http:3.1.0'
    mavenEmbedder 'org.apache.maven.wagon:wagon-provider-api:3.1.0'
}


// loosely based on https://gist.github.com/ctran/2c753055ce7e6730ae24594a37152272
// runs the plugin description generator
task generatePluginDescriptor(type: JavaExec, dependsOn: compileJava) {

	//def outputDirectory = new File("generatedsrc/main/resources")
	//def directory = outputDirectory
	
	def directory = buildDir.canonicalPath
    def outputDirectory = compileJava.destinationDir.canonicalPath
    def outputFile = "$project.projectDir/generatedsrc/main/resources/plugin-pom.xml"

    outputs.dir "$buildDir/classes/java/main/META-INF/maven/"
    outputs.file outputFile

    classpath = configurations.mavenEmbedder
    main = 'org.apache.maven.cli.MavenCli'
    systemProperties['maven.multiModuleProjectDirectory'] = projectDir
    args = [
            '--errors',
            '--batch-mode',
            "--file", new File(outputFile).canonicalPath,
            //"-Dmaven.multiModuleProjectDirectory=" + projectDir.canonicalPath, //why is this not working...
            "org.apache.maven.plugins:maven-plugin-plugin:3.5.2:descriptor"
    ]
    doFirst {
    	pom {
	        project {
	        	name "Junit Reporter"
	            groupId "${project.group}"
	            artifactId 'junit-reporter'
	            version "${project.version}"
	            packaging "maven-plugin"
	        }
	    }.withXml {
	    	asNode().appendNode("build").with {
	    		appendNode("directory", directory)
	    		appendNode("outputDirectory", outputDirectory)
	    		appendNode("plugins").with {
	    			appendNode("plugin").with {
	    				appendNode("groupId", "org.apache.maven.plugins")
	    				appendNode("artifactId", "maven-plugin-plugin")
	    				appendNode("version", "3.5.2")
	    				appendNode("configuration").with {
	    					appendNode("skipErrorNoDescriptorsFound", "true")
	    				}
	    				appendNode("executions").with {
	    					appendNode("execution").with {
	    						appendNode("id", "mojo-descriptor")
	    						//appendNode("phase", "process-classes")
	    						appendNode("goals").with {
	    							appendNode("goal", "descriptor")
	    						}
	    					}
	    				}
	    			}
	    		}
	    	}
	    }.writeTo(new File(outputFile).canonicalPath)
    }
}
sourcesJar.dependsOn generatePluginDescriptor
processResources.dependsOn generatePluginDescriptor
jar.dependsOn generatePluginDescriptor
compileJava.finalizedBy generatePluginDescriptor


node {
	// Version of node to use.
	version = '12.11.1'

	// Version of npm to use.
	npmVersion = '6.12.0'
  
	//download a version to use.
	//otherwise this will use npm from the system PATH
	download = true
}

task npmBuild(type: NpmTask) {
  // This task is time-consuming so,
  // we add inputs and outputs to this task
  // to make it incremental
  inputs.dir "$project.projectDir/node_modules"
  inputs.files("$project.projectDir/package.json", "$project.projectDir/webpack.config.js",
               "$project.projectDir/src/main/js/main.jsx")
  outputs.file "$project.projectDir/generatedsrc/main/resources/template/site.js"
  args = ['run', 'build']
}
processTestResources.dependsOn initGeneratedDirectories
testSourcesJar.dependsOn initGeneratedDirectories
npmBuild.dependsOn initGeneratedDirectories
npmBuild.dependsOn npmInstall
processResources.dependsOn npmBuild

//clean.dependsOn npm_cache_clean
clean.dependsOn cleanGeneratedDirectories
